<?xml version="1.0"?>

<!-- For more information on using web.config transformation visit http://go.microsoft.com/fwlink/?LinkId=125889 -->

<configuration xmlns:xdt="http://schemas.microsoft.com/XML-Document-Transform">
  <sitecore>
    <pipelines>
      <httpRequestProcessed xdt:Transform="InsertAfter(httpRequestBegin)" />
      <renderItemTile>
        <processor type="Sitecore.Pipelines.RenderItemTile.RenderPlaceholderTile, Sitecore.Kernel" xdt:Transform="InsertAfter(processor[contains(@type, 'Sitecore.Pipelines.RenderItemTile.RenderTemplateTile, Sitecore.Kernel')])"/>
      </renderItemTile>
      <getPlaceholderRenderings>
        <processor type="Sitecore.Pipelines.GetPlaceholderRenderings.RemoveNonEditableRenderings, Sitecore.Kernel" xdt:Transform="InsertAfter(processor[contains(@type, 'Sitecore.Pipelines.GetPlaceholderRenderings.GetPredefinedRenderings, Sitecore.Kernel')])" />
      </getPlaceholderRenderings>
      <getRenderingDatasource>
        <processor type="Sitecore.Pipelines.GetRenderingDatasource.GetTemplatesForSelection, Sitecore.Kernel" xdt:Transform="InsertAfter(processor[contains(@type, 'Sitecore.Pipelines.GetRenderingDatasource.GetDatasourceTemplate, Sitecore.Kernel')])" />
      </getRenderingDatasource>
      <!--  Controls actions performed on presentation components in Page Editor -->
      <executePageEditorAction xdt:Transform="InsertAfter(getRenderingDatasource)">
        <processor type="Sitecore.Pipelines.ExecutePageEditorAction.InsertRendering, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ExecutePageEditorAction.ReplaceRendering, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ExecutePageEditorAction.PreviewRendering, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ExecutePageEditorAction.StopIfSublayout, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ExecutePageEditorAction.TryGetXslContol, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ExecutePageEditorAction.TryGetWebControl, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ExecutePageEditorAction.InitActionHandler, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ExecutePageEditorAction.GetDefaultControl, Sitecore.Kernel" />
      </executePageEditorAction>
      <saveRichTextContent>
        <processor type="Sitecore.Shell.Controls.RichTextEditor.Pipelines.SaveRichTextContent.EmbedInParagraph, Sitecore.Client" xdt:Transform="Remove" xdt:Locator="Match(type)"/>
      </saveRichTextContent>
      <getItemPersonalizationVisibility xdt:Transform="InsertAfter(saveRichTextContent)">
        <processor type="Sitecore.Pipelines.GetItemPersonalizationVisibility.CheckAnalyticsConfiguration, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetItemPersonalizationVisibility.CheckUserSettings, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetItemPersonalizationVisibility.CheckSectionAvailability, Sitecore.Kernel" />
      </getItemPersonalizationVisibility>
      <findVisitorEmailAddress xdt:Transform="InsertAfter(saveRichTextContent)">
        <processor type="Sitecore.Pipelines.GetVisitorEmailAddress.FindVisitorEmailAddress,Sitecore.Kernel" method="FindEmailInUserProfile" />
      </findVisitorEmailAddress>
    </pipelines>

    <databases>
      <database id="core" singleInstance="true" type="Sitecore.Data.Database, Sitecore.Kernel">
        <indexes hint="list:AddIndex" xdt:Transform="Remove">
          <index path="indexes/index[@id='system']" />
        </indexes>
      </database>
      <database id="master" singleInstance="true" type="Sitecore.Data.Database, Sitecore.Kernel">
        <indexes hint="list:AddIndex" xdt:Transform="Remove">
          <index path="indexes/index[@id='system']" />
        </indexes>
      </database>
    </databases>

    <indexes xdt:Transform="Remove">
      <index id="system" singleInstance="true" type="Sitecore.Data.Indexing.Index, Sitecore.Kernel">
        <param desc="name">$(id)</param>
        <fields hint="raw:AddField">
          <field target="created">__created</field>
          <field target="updated">__updated</field>
          <field target="author">__updated by</field>
          <field target="published">__published</field>
          <field target="name">@name</field>
          <field storage="unstored">@name</field>
          <field target="template" storage="keyword">@tid</field>
          <field target="id" storage="unstored">@id</field>
          <type storage="unstored">memo</type>
          <type storage="unstored">text</type>
          <type storage="unstored" stripTags="true">html</type>
          <type storage="unstored" stripTags="true">rich text</type>
          <type storage="unstored" stripTags="true">word document</type>
        </fields>
      </index>
    </indexes>

    <accessRights>
      <rights>
        <add name="profile:customize" comment="The right to input out of range values of profile keys, that belong to this profile." title="Customize Profile Key Values" xdt:Transform="InsertAfter(add[@name='workflowCommand:execute'])"/>
      </rights>
      <rules>
        <add prefix="field:" ancestor="{3C1715FE-6A13-4FCF-845F-DE308BA9741D}" comment="/sitecore/templates" typeName="Sitecore.Data.Fields.Field" xdt:Transform="SetAttributes(typeName)" xdt:Locator="Match(comment, prefix, ancestor)"/>
        <add prefix="profile:" templateId="{8E0C1738-3591-4C60-8151-54ABCC9807D1}" comment="profile:customize for Profile items only" xdt:Transform="InsertAfter(add[@prefix='workflowCommand:'])"/>
      </rules>
    </accessRights>

    <scheduling>
      <agent>
        <files hint="raw:AddCommand">
          <remove folder="$(dataFolder)/Dashboard reports" pattern="*.*" maxAge="2.00:00:00" recursive="true" xdt:Transform="InsertAfter(remove[@folder='$(dataFolder)/viewstate'])"/>
        </files>
      </agent>
    </scheduling>

    <settings>
      <!--  LOGIN DISABLE CHANGE PASSWORD
      If true, Sitecore hides the "Change Password" link on the login page and disables the
      /sitecore/login/changepassword.aspx page.
      Default: false
-->
      <setting name="Login.DisableChangePassword" value="false" xdt:Transform="InsertAfter(setting[@name='LogFolder'])" xdt:Locator="XPath(parent::*[not(contains(@name, 'Login.DisableChangePassword'))])" />
      <!--  LOGIN DISABLE PASSWORD RECOVERY
      If true, Sitecore hides the "Forgot Your Password?" link on the login page and disables the
      /sitecore/login/passwordrecovery.aspx page.
      Default: false
-->
      <setting name="Login.DisablePasswordRecovery" value="false" xdt:Transform="InsertAfter(setting[@name='Login.DisableChangePassword'])" xdt:Locator="XPath(parent::*[not(contains(@name, 'Login.DisablePasswordRecovery'))])" />

      <setting name="Login.SitecoreUrl" value="http://sdn.sitecore.net/startpage.aspx" xdt:Transform="SetAttributes" xdt:Locator="Match(name)"/>

      <!--  EmailValidation
      The regular expression used for e-mail validation
      Default: ^[a-zA-Z0-9_-]+(?:\.[a-zA-Z0-9_-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$
-->
      <setting name="EmailValidation" value="^[a-zA-Z0-9_-]+(?:\.[a-zA-Z0-9_-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$" xdt:Transform="InsertAfter(setting[@name='Preview.DefaultSite'])"/>


      <!--  REDIRECT URL PREFIXES
      Pipe-separated list of URL prefixes to redirect.
      To support IIS authentication, configure redirection for all URLs secured with IIS authentication. Otherwise,
      URLs containing embedded languages in the URL might be able to bypass IIS security, which could result in a
      vulnerability.
      For example, under the default configuration, Sitecore redirects URLs such as "/en/sitecore" to "/sitecore?sc_lang=en"
      to ensure that IIS authentication is enforced for such URLs.
      Default value: /sitecore
-->
      <setting name="RedirectURLPrefixes" value="/sitecore" xdt:Transform="InsertAfter(setting[@name='Upload.UserSelectableDestination'])" xdt:Locator="XPath(parent::*[not(contains(@name, 'RedirectURLPrefixes'))])" />

      <!--  WEBEDIT DISABLE ANIMATIONS
      Disables animation effects in the Page Editor.
      Default value: false
-->
      <setting name="WebEdit.DisableAnimations" value="false" xdt:Transform="InsertAfter(setting[@name='WebEdit.DefaultButtonPath'])" />
      <!--  WEB EDIT ENABLE JS BUNDLING
      Indicates whether web edit specific JavaScript files should be bundled into one file.
      Default value: true
-->
      <setting name="WebEdit.EnableJSBundling" value="true" xdt:Transform="InsertAfter(setting[@name='WebEdit.DisableAnimations'])" />
      <!--  WEB EDIT BUNDLED JS FILES PATH
      Specifies the path where bundled JavaScript files are stored if WebEdit.EnableJSBundling = true
      Default value: /sitecore/shell/Applications/Page Modes/Ouput/
-->
      <setting name="WebEdit.BundledJSFilesPath" value="/sitecore/shell/Applications/Page Modes/Ouput/" xdt:Transform="InsertAfter(setting[@name='WebEdit.EnableJSBundling'])" />
      <!--  WEB EDIT PLACEHOLDERS EDITABLE WITHOUT SETTINGS
      Indicates whether placeholders should be editable in the Page Editor if placeholder settings are not specified.
      Default value: false
-->
      <setting name="WebEdit.PlaceholdersEditableWithoutSettings" value="false" xdt:Transform="InsertAfter(setting[@name='WebEdit.BundledJSFilesPath'])" />
      <!--  WEBEDIT PAGE DAILY VISITS CACHE EXPIRATION
      Sets the absolute expiration on the cached daily visits data in Page Editor.
      Makes sense only when analytics is enabled.
      Default value: 1.00:00:00 (1 day)
-->
      <setting name="WebEdit.PageDailyVisitsCacheExpiration" value="1.00:00:00" xdt:Transform="InsertAfter(setting[@name='WebEdit.PlaceholdersEditableWithoutSettings'])" />
      <!--  WEBEDIT TEST STATISTICS CACHE EXPIRATION
      Sets the absolute expiration on the cached test statistics data in Page Editor.
      Makes sense only when analytics is enabled.
      Default value: 01:00:00 (1 hour)
-->
      <setting name="WebEdit.TestStatisticsCacheExpiration" value="01:00:00" xdt:Transform="InsertAfter(setting[@name='WebEdit.PageDailyVisitsCacheExpiration'])" />
    </settings>
  </sitecore>
  <system.webServer>
    <modules>
      <add type="Sitecore.Web.HttpModule,Sitecore.Kernel" name="SitecoreHttpModuleExtensions" xdt:Transform="InsertAfter(add[@name='MediaRequestSessionModule'])" />
    </modules>
    <handlers>
      <add verb="*" path="sitecore_handlers.ashx" type="Sitecore.Web.CustomHandlerFactory, Sitecore.Kernel" name="Sitecore.GenericHandler" xdt:Transform="InsertAfter(add[@name='Sitecore.FeedRequestHandler'])" />
    </handlers>
  </system.webServer>
  <system.web>
    <httpModules>
      <add type="Sitecore.Resources.Media.MediaRequestSessionModule, Sitecore.Kernel" name="MediaRequestSessionModule" xdt:Transform="InsertAfter(add[@name='ScriptModule'])" />
      <add type="Sitecore.Web.HttpModule,Sitecore.Kernel" name="SitecoreHttpModuleExtensions" xdt:Transform="InsertAfter(add[@name='MediaRequestSessionModule'])"/>
    </httpModules>
    <httpHandlers>
      <add verb="*" path="sitecore_handlers.ashx" type="Sitecore.Web.CustomHandlerFactory, Sitecore.Kernel" xdt:Transform="InsertAfter(add[@path='sitecore_feed.ashx'])" />
    </httpHandlers>
    <trace enabled="true" requestLimit="50" pageOutput="false" traceMode="SortByTime" localOnly="true"  xdt:Transform="SetAttributes" />
  </system.web>
</configuration>