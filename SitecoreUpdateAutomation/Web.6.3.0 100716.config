<?xml version="1.0" encoding="utf-8" ?>
<!-- For more information on using transformations 
     see the web.config examples at http://go.microsoft.com/fwlink/?LinkId=214134. -->
<configuration xmlns:xdt="http://schemas.microsoft.com/XML-Document-Transform">
  <sitecore>
    <events>
      <event name="item:added:remote">
        <handler type="Sitecore.Data.Fields.ItemEventHandler, Sitecore.Kernel" method="OnItemAddedRemote" />
      </event>
      <event name="item:copied:remote" />
      <event name="item:created:remote" />
      <event name="item:deleted:remote">
        <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemDeletedRemote" />
        <handler type="Sitecore.Data.Fields.ItemEventHandler, Sitecore.Kernel" method="OnItemDeletedRemote" />
        <handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnItemDeletedRemote" />
      </event>
      <event name="item:locked" />
      <event name="item:moved:remote" />
      <event name="item:renamed:remote" />
      <event name="item:saved:remote">
        <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemSavedRemote" />
        <handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnItemSavedRemote" />
      </event>
      <event name="item:sortorderchanged:remote" />
      <event name="item:templateChanged" />
      <event name="item:unlocked" />
      <event name="item:versionAdded:remote" />
      <event name="item:versionRemoved:remote">
        <handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnVersionRemovedRemote" />
      </event>
      <event name="publish:startPublishing">
        <handler type="Sitecore.Publishing.RemotePublishingEventHandler, Sitecore.Kernel" method="OnStartPublishing" />
      </event>
      <event name="publish:statusUpdated">
        <handler type="Sitecore.Publishing.RemotePublishingEventHandler, Sitecore.Kernel" method="OnStatusUpdated" />
      </event>
      <!-- user:created(System.Web.Security.MembershipUser user)
     Raised when a new membership user has been created. -->
      <event name="user:created" xdt:Transform="Insert" />
      <!-- user:created:remote(UserCreatedRemoteEventArgs args)
     Raised when a new membership user has been created on a remote Sitecore instance. -->
      <event name="user:created:remote" xdt:Transform="Insert" />
      <!-- user:deleted(string userName)
     Raised when a new membership user has been deleted. -->
      <event name="user:deleted" xdt:Transform="Insert" />
      <!-- user:deleted:remote(UserDeletedRemoteEventArgs args)
     Raised when a new membership user has been deleted on a remote Sitecore instance. -->
      <event name="user:deleted:remote" xdt:Transform="Insert" />
      <!-- user:updated(System.Web.Security.MembershipUser user)
     Raised when a new membership user has been updated. -->
      <event name="user:updated" xdt:Transform="Insert" />
      <!-- user:updated:remote(UserUpdatedRemoteEventArgs args)
     Raised when a new membership user has been updated on a remote Sitecore instance. -->
      <event name="user:updated:remote" xdt:Transform="Insert" />
      <!-- role:created(string roleName)
     Raised when a new membership role has been created. -->
      <event name="role:created" xdt:Transform="Insert" />
      <!-- role:created:remote(RoleCreatedRemoteEventArgs args)
     Raised when a new membership role has been created on a remote Sitecore instance. -->
      <event name="role:created:remote" xdt:Transform="Insert" />
      <!-- role:deleted(string roleName)
     Raised when a new membership role has been deleted. -->
      <event name="role:deleted" xdt:Transform="Insert" />
      <!-- role:deleted:remote(RoleDeletedRemoteEventArgs args)
     Raised when a new membership role has been deleted on a remote Sitecore instance. -->
      <event name="role:deleted:remote" xdt:Transform="Insert" />
      <!-- roles:relationsRemoved(string roleName)
     Raised when all relations have been removed for a role. -->
      <event name="roles:relationsRemoved" xdt:Transform="Insert" />
      <!-- roles:relationsRemoved:remote(RoleRelationsRemovedRemoteEventArgs args)
     Raised when all relations have been removed for a role on a remote Sitecore instance. -->
      <event name="roles:relationsRemoved:remote" xdt:Transform="Insert" />
      <!-- roles:rolesAdded(IEnumerable<Role> memberRoles, IEnumerable<Role> targetRoles)
     Raised when roles have been added to one or more roles. -->
      <event name="roles:rolesAdded" xdt:Transform="Insert" />
      <!-- roles:rolesAdded:remote(RolesAddedToRolesRemoteEventArgs args)
     Raised when roles have been added to one or more roles on a remote Sitecore instance. -->
      <event name="roles:rolesAdded:remote" xdt:Transform="Insert" />
      <!-- roles:rolesRemoved(IEnumerable<Role> memberRoles, IEnumerable<Role> targetRoles)
     Raised when roles have been removed from one or more roles. -->
      <event name="roles:rolesRemoved" xdt:Transform="Insert" />
      <!-- roles:rolesRemoved:remote(RolesRemovedFromRolesRemoteEventArgs args)
     Raised when roles have been removed from one or more roles on a remote Sitecore instance. -->
      <event name="roles:rolesRemoved:remote" xdt:Transform="Insert" />
      <!-- roles:usersAdded(string[] userNames, string[] roleNames)
     Raised when users have been added to one or more roles. -->
      <event name="roles:usersAdded" xdt:Transform="Insert" />
      <!-- roles:usersAdded:remote(UsersAddedToRolesRemoteEventArgs args)
     Raised when users have been added to one or more roles on a remote Sitecore instance. -->
      <event name="roles:usersAdded:remote" xdt:Transform="Insert" />
      <!-- roles:usersRemoved(string[] userNames, string[] roleNames)
     Raised when users have been removed from one or more roles. -->
      <event name="roles:usersRemoved" xdt:Transform="Insert" />
      <!-- roles:usersRemoved:remote(UsersRemovedFromRolesRemoteEventArgs args)
     Raised when users have been removed from one or more roles on a remote Sitecore instance. -->
      <event name="roles:usersRemoved:remote" xdt:Transform="Insert" />
      <!-- database:propertychanged(string parameterName)
     Raised when database property was changed. -->
      <event name="database:propertychanged" xdt:Transform="Insert" />
      <!-- idtable:removed(string parameterName)
     Raised when property was removed from idtable. -->
      <event name="idtable:removed" xdt:Transform="Insert" />
      <!-- idtable:added(string parameterName)
     Raised when property was added to idtable. -->
      <event name="idtable:added" xdt:Transform="Insert" />

      <event name="item:saved">
        <handler type="Sitecore.Tasks.ItemEventHandler, Sitecore.Kernel" method="OnItemSaved" xdt:Transform="Remove"  xdt:Locator="Match(type, method)/>
      </event>
      <event name="item:saving">
        <handler type="Sitecore.Tasks.ItemEventHandler, Sitecore.Kernel" method="OnItemSaving" xdt:Transform="Insert"/>
      </event>
    </events>

    <!-- EVENTING -->
    <!-- Settings for strongly typed events. -->
    <eventing defaultProvider="sitecore" xdt:Transform="InsertAfter(/configuration/sitecore/events)">
      <!-- Provider for managing event subscriptions, dispatching and queueing of remote events. -->
      <providers>
        <clear />
        <!--
      Default event provider (uses event queues provided by Sitecore databases).
      General attributes:
        name: Name of the provider.
        type: Assembly qualified type name of the class implementing the provider.
      Event provider attributes:
        systemDatabaseName: Name of the database which will hold the system event queue.
          System event queue receives all the events that are not related to a specific database.
    -->
        <add name="sitecore" type="Sitecore.Eventing.EventProvider, Sitecore.Kernel" systemDatabaseName="core" />
      </providers>
      <!-- Settings related to queued events -->
      <eventQueue>
        <!-- Time between checking the queue for newly queued events. If new events are found they will be raised. -->
        <processingInterval>00:00:02</processingInterval>
      </eventQueue>
    </eventing>

    <rendering>
      <typesThatShouldNotBeExpanded>
        <type xdt:Transform="Insert">System.Web.UI.WebControls.ListView</type>
        <type xdt:Transform="Insert">System.Web.UI.WebControls.FormView</type>
        <type xdt:Transform="Insert">System.Web.UI.WebControls.GridView</type>
        <type xdt:Transform="Insert">Microsoft.Reporting.WebForms.ReportViewer</type>
        <type xdt:Transform="Insert">Telerik.Web.UI.RadGrid</type>
      </typesThatShouldNotBeExpanded>
    </rendering>
    
    <pipelines>
      <initialize>
        <processor type="Sitecore.Pipelines.Loader.ShowVersion, Sitecore.Kernel">
          <assemblies hint="list:AddAssembly">
            <assembly xdt:Transform="Insert">
              /bin/Sitecore.Nexus.dll
            </assembly>
          </assemblies>
        </processor>
        <processor type="Sitecore.Eventing.Remote.RemoteEventMap, Sitecore.Kernel" method="InitializeFromPipeline" xdt:Transform="InsertAfter(processor[contains(@type, 'Sitecore.Pipelines.Loader.SetGlobals, Sitecore.Kernel')])"/>
      </initialize>
    </pipelines>
    <!-- List of data api implementations enabling access to SQL based databases. -->
    <dataApis xdt:Transform="InsertAfter(/configuration/sitecore/dataProviders)">
      <!-- Data api for accessing SQL Server databases. -->
      <dataApi name="SqlServer" type="Sitecore.Data.SqlServer.SqlServerDataApi, Sitecore.Kernel">
        <param connectionStringName="$(1)" />
      </dataApi>
    </dataApis>
    <scheduling>
      <!-- Agent to clean up the event queue -->
      <agent type="Sitecore.Tasks.CleanupEventQueue, Sitecore.Kernel" method="Run" interval="04:00:00">
        <DaysToKeep>1</DaysToKeep>
      </agent>
      <agent type="Sitecore.Tasks.CleanupAgent">
        <files hint="raw:AddCommand">
          <remove folder="$(tempFolder)/diagnostics" pattern="*.*" maxAge="00:10:00" recursive="true" xdt:Transform="Insert"/>
        </files>
      </agent>
    </scheduling>
    <watchers>
      <config xdt:Transform="Replace">
        <folder>/App_Config</folder>
        <filter>*.config</filter>
      </config>
    </watchers>
    <settings>
      <!--  AUTHENTICATION TICKET TIMEOUT
        Specifies the number of minutes before an authentication ticket
        becomes invalid. The default is 480 minutes (8 hours).
-->
      <setting name="Authentication.TicketTimeout" value="480" xdt:Transform="Insert" />
      <!--  SECURITY CACHE EXPIRATION
        Sets the absolute expiration on the cached security data.
        A value of 00:00:00 disables automatic expiration of security caches.
        Default value: 00:00:00
-->
      <setting name="Caching.SecurityCacheExpiration" value="00:00:00" xdt:Transform="Insert" />
      <!--  ENABLE OR DISABLE CLIENT FEEDS
        Disable client feeds to remove all links to the feeds from the Sitecore Client and turn off client feed generation.
        Default value: true, client feeds are enabled.
      -->
      <setting name="ClientFeeds.Enabled" value="true" xdt:Transform="Insert" />
      <!--  ENABLE EVENT QUEUES
        If enabled, Sitecore sends local events to the event queue available to remote instances, 
        and handles events in the queue from remote instances.
-->
      <setting name="EnableEventQueues" value="false" xdt:Transform="Insert" />
      <!--  MEDIA - DISABLE FILE MEDIA
      Enables or disables storage of media as files rather than database records. 
      If true, user interfaces do not present options to store media as files.
      If true, this setting supersedes the Media.UploadAsFiles setting.
      Default value: false
-->
      <setting name="Media.DisableFileMedia" value="false" xdt:Transform="Insert" />
      <!--  PUBLISHING INSTANCE
        Assigns the instance name of dedicated Sitecore installation for publishing operations.
        When empty, all publishing operations are performed on the local installation of Sitecore.
        Default vaue: (empty)
      -->
      <setting name="Publishing.PublishingInstance" value="" xdt:Transform="Insert" />
      <!--  PUBLISHING STATUS UPDATE INTERVAL
        The time between updating the status cache for running publishing jobs.
        Default value: 00:00:02
-->
      <setting name="Publishing.StatusUpdateInterval" value="00:00:02" xdt:Transform="Insert" />
      <!--  TIME BEFORE PUBLISHING STATUS EXPIRES
        The time before a cached status registration expires.
        Default value: 02:00:00
-->
      <setting name="Publishing.TimeBeforeStatusExpires" value="02:00:00" xdt:Transform="Insert" />
      <!--  INSTANCE NAME
        Unique name of this Sitecore instance
        Default value: (machine name and IIS site name)
-->
      <setting name="InstanceName" value="" xdt:Transform="Insert" />

      <!--  COUNTERS INSTANCE NAME
      Instance name for performance counters.
      Default value: (value of InstanceName setting)
-->
      <setting name="Counters.InstanceName" value="" xdt:Transform="SetAttributes(value)"  xdt:Locator="Match(name)"/>
      <setting name="HeartbeatInterval" value="00:00:02" xdt:Transform="SetAttributes(value)"  xdt:Locator="Match(name)"/>
      <setting name="Media.MaxSizeInDatabase" value="500MB" xdt:Transform="SetAttributes(value)" xdt:Locator="Match(name)"/>
    </settings>
  </sitecore>
  <system.webServer>
    <modules>
      <add type="Sitecore.IntegratedSessionFix.Module, Sitecore.Kernel" name="Module" xdt:Transform="Remove" xdt:Locator="Match(name)"/>
      <add type="Sitecore.Resources.Media.MediaRequestSessionModule, Sitecore.Kernel" name="MediaRequestSessionModule" xdt:Transform="InsertAfter(add[contains(@type, 'System.Web.SessionState.SessionStateModule')])"/>
    </modules>
  </system.webServer>
</configuration>