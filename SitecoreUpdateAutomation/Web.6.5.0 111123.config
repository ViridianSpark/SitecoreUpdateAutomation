<?xml version="1.0" encoding="utf-8" ?>
<!-- For more information on using transformations 
     see the web.config examples at http://go.microsoft.com/fwlink/?LinkId=214134. -->
<configuration xmlns:xdt="http://schemas.microsoft.com/XML-Document-Transform">
  <sitecore>
    <pipelines>
      <renderLayout>
        <processor type="Sitecore.Pipelines.RenderLayout.ExpandMasterPages, Sitecore.Kernel" xdt:Transform="InsertAfter(processor[contains(@type, 'Sitecore.Pipelines.RenderLayout.PageExtenders, Sitecore.Kernel')])"/>
      </renderLayout>
      <expandInitialFieldValue help="Processors should derive from Sitecore.Pipelines.ExpandInitialFieldValue.ExpandInitialFieldValueProcessor">
        <processor type="Sitecore.Pipelines.ExpandInitialFieldValue.CheckSharedField, Sitecore.Kernel" xdt:Transform="Insert" xdt:Locator="XPath(parent::*[not(contains(@type, 'Sitecore.Pipelines.ExpandInitialFieldValue.CheckSharedField, Sitecore.Kernel'))])" />
      </expandInitialFieldValue>
      <getRenderingDatasource>
        <processor type="Sitecore.Pipelines.GetRenderingDatasource.GetDatasourceLocation, Sitecore.Kernel"/>
        <processor type="Sitecore.Pipelines.GetRenderingDatasource.SetFallbackDatasourceLocations, Sitecore.Kernel" xdt:Transform="InsertAfter(processor[contains(@type, 'Sitecore.Pipelines.GetRenderingDatasource.GetDatasourceLocation, Sitecore.Kernel')])"/>
      </getRenderingDatasource>
      <renderField>
        <processor type="Sitecore.Pipelines.RenderField.GetTextFieldValue, Sitecore.Kernel"  xdt:Transform="InsertAfter(processor[contains(@type, 'Sitecore.Pipelines.RenderField.GetFieldValue, Sitecore.Kernel')])"/>
      </renderField>
    </pipelines>
    <scheduling>
      <!-- Agent to publish database periodically -->
      <agent type="Sitecore.Tasks.PublishAgent" method="Run" interval="00:00:00">
        <param desc="mode (full or smart or incremental)" xdt:Transform="SetAttributes(desc)">incremental</param>
      </agent>
    </scheduling>
    <settings>
      <setting name="Authentication.TicketTimeout" value="480" xdt:Transform="Remove" xdt:Locator="Match(name)"/>

      <!--  AUTHENTICATION CLIENT SESSION TIMEOUT
      Specifies the number of minutes before Sitecore considers user authentication session tickets as expired.
      This setting is only relevant for users logging in to Sitecore Client and when the Sitecore license has a limited number
      of concurrent editors. 
      All expired sessions will automatically be removed when a new user tries to log in and the maximum
      number of concurrent editors has been reached. 
      The default is 60 minutes (1 hour).
-->
      <setting name="Authentication.ClientSessionTimeout" value="60" xdt:Transform="Insert" xdt:Locator="XPath(parent::*[not(contains(@name, 'Authentication.ClientSessionTimeout'))])" />

      <!--  CACHING - DISABLE CACHE SIZE LIMITS
      If true, Sitecore does not limit cache size growth and ignores any maximum cache sizes 
      specified in the web.config file.            
      Enabling this setting can improve the application's performance in 64-bit environments 
      by allowing Sitecore to take full advantage of the available memory.
      After setting this value to true, monitor the system at regular intervals, as this 
      configuration can cause Sitecore to consume too much memory and cause Out Of Memory errors.
      It is only recommended to set the setting to true in 64-bit environments.
      Default value: false
-->
      <setting name="Caching.DisableCacheSizeLimits" value="false" xdt:Transform="Insert" xdt:Locator="XPath(parent::*[not(contains(@name, 'Caching.DisableCacheSizeLimits'))])" />

      <!--  ENABLE SITE.CONFIG FILES
      If true, the SiteResolver pipeline processor checks for the existence of a "site.config"
      file in the physical subdirectory corresponding to the requested URL. If a "site.config"
      file exists, Sitecore uses that file to determine the context site (Sitecore.Context.Site)
      for the current request. 
      For example, when processing a request for the URL http://site.com/parent/child.aspx, 
      Sitecore first checks for the existence of <webroot>/parent/site.config. 
      Syntax: The site.config files should contain the following XML markup:
        <site reference="[name of the site definition from the web.config]"/>
      Default value: false
-->
      <setting name="EnableSiteConfigFiles" value="false" xdt:Transform="Insert" xdt:Locator="XPath(parent::*[not(contains(@name, 'EnableSiteConfigFiles'))])"/>

      <!--  MEDIA - CACHE FILE MEDIA BY MODIFIED DATE
      If true, in addition to varying by the standard media request parameters such as height and width, 
      Sitecore varies media cache entries for file-based media by both file path and the last modification 
      date of the media file.
      If false, Sitecore varies file media cache entries only by file path and standard media request 
      parameters and does not account for the last modification date of the file. A false value decreases 
      the number of file system I/O operations performed for each media request, but could cause Sitecore 
      to serve stale data for file media items if a process other than the Sitecore CMS user interfaces 
      initiated that change.
      Default value: true
-->
      <setting name="Media.CacheFileMediaByModifiedDate" value="true" xdt:Transform="Insert" xdt:Locator="XPath(parent::*[not(contains(@name, 'Media.CacheFileMediaByModifiedDate'))])"/>

      <!--  MEDIA - RESIZING MAX HEIGHT 
      Maximum height for dynamically resized images. 
      If the requested height exceeds this value, Sitecore resizes the image to this height.
      A value of 0 disables this height limit.
      Default value: 1024
-->
      <setting name="Media.Resizing.MaxHeight" value="1024" xdt:Transform="Insert" xdt:Locator="XPath(parent::*[not(contains(@name, 'Media.Resizing.MaxHeight'))])"/>
      <!--  MEDIA - RESIZING MAX WIDTH
      Maximum width for dynamically resized images. 
      If the requested width exceeds this value, Sitecore resizes the image to this width.
      A value of 0 disables this width limit.
      Default value: 1280
-->
      <setting name="Media.Resizing.MaxWidth" value="1280" xdt:Transform="Insert" xdt:Locator="XPath(parent::*[not(contains(@name, 'Media.Resizing.MaxWidth'))])"/>

      <!--  SERIALIZATION - INVALID FILE NAME CHARS
      When generating file names that correspond to item names, the serialization API encodes the "$" and "%" characters, as well 
      as any characters that are invalid in path names as returned by the System.IO.Path.GetInvalidFileNameChars() method. 
      You can use this setting to specify additional characters that must be encoded, such as to meet the requirements of a source 
      control system that does not allow specific characters in file names.
      Default value: ""
-->
      <setting name="Serialization.InvalidFileNameChars" value="" xdt:Transform="Insert" xdt:Locator="XPath(parent::*[not(contains(@name, 'Serialization.InvalidFileNameChars'))])"/>
    </settings>
  </sitecore>
  <system.webServer>
    <modules>
      <add type="Sitecore.Web.RewriteModule, Sitecore.Kernel" name="SitecoreRewriteModule" xdt:Transform="InsertAfter(add[@name='SitecoreHttpModule'])" xdt:Locator="XPath(parent::*[not(contains(@name, 'SitecoreRewriteModule'))])"/>
    </modules>
  </system.webServer>
  <system.web>
    <httpModules>
      <add type="Sitecore.Web.RewriteModule, Sitecore.Kernel" name="SitecoreRewriteModule" xdt:Transform="InsertAfter(add[@name='SitecoreHttpModule'])" xdt:Locator="XPath(parent::*[not(contains(@name, 'SitecoreRewriteModule'))])"/>
    </httpModules>
    <trace enabled="false" requestLimit="50" pageOutput="false" traceMode="SortByTime" localOnly="true" xdt:Transform="SetAttributes(enabled)"/>
  </system.web>
</configuration>